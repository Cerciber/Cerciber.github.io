[
    {
        "type": "presentation",
        "info": {
            "theme": "5",
            "title": "SctuctFile",
            "decription": "",
            "authors": [
                "Cesar Augusto Torres Ardila"
            ]
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "2",
            "title": "¿Qué es?",
            "decription": "SctuctFile es un lenguaje de programación de propósito dedicado orientado al tratamiento de directorios, archivos y texto plano. El lenguaje toma como base el manejo de expresiones regulares para estructurar la información y permite reorganizarla y cambiarla directamente a partir de coincidencias.",
            "image": "/Images/structfile1.png"
        }
    },
    {
        "type": "images",
        "info": {
            "theme": "2",
            "title": "Vista general",
            "decription": "",
            "images": [
                "/Images/structfile43.png",
                "/Images/structfile12.png",
                "/Images/structfile19.png",
                "/Images/structfile8.png"
            ]
        }
    },
    {
        "type": "characteristics",
        "info": {
            "theme": "1",
            "title": "Características del proyecto",
            "decription": "Este proyecto, desarrollado para la materia de lenguajes de programación, fue creado con el objetivo de permitirle a los programadores trabajar de una forma mas fácil con información no estructurada almacenada en archivos de texto plano. La idea es elminar todo el proceso de acceso para acceder a los archivos del sistema, a su información y al manejo de expresiones regulares que presentan los lenguajes de progrmación en general.",
            "subtitles": [
                "Equipo:",
                "Tipo:",
                "Arquitectura:",
                "Lenguajes:",
                "Tecnologías:"
            ],
            "subdescriptions": [
                "<b>Cesar Augusto Torres Ardilla</b>. Tecnólogo en Análisis y desarrollo de Sistemas de información del Servicio Nacional de Aprendizaje (SENA). Estudiante de Ingeniería de Sistemas y Computación de la Universidad Nacional de Colombia.",
                "Lenguaje de programación",
                "Basada en capas",
                "Java SE<br>Python<br>RegEx",
                "ANTLR<br>Numpy"
            ]
        }
    },
    {
        "type": "title",
        "info": {
            "theme": "5",
            "title": "Funcionamiento"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "1",
            "title": "Tipos de datos (Números)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de numeros llamado 'num' el cual almacena valores enteros y reales. Si el numero no tiene parte decimal se considera entero y si la tiene se considera real.",
            "image": "/Images/structfile2.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "2",
            "title": "Tipos de datos (Boleanos)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de booleanos llamado 'bol'. Almacena un valor verdadero (true) o falso (false).",
            "image": "/Images/structfile3.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "1",
            "title": "Tipos de datos (Textos)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de texto llamado 'tex'. Almacena cadenas de texto y expresiones regulares. Utiliza comillas dobles para tomar caracteres especiales y comillas simples para no hacerlo. Admite cadena de texto en varias líneas. Contiene métodos especializados en el tratamiento de texto con expresiones regulares y por numeración.",
            "image": "/Images/structfile4.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "2",
            "title": "Tipos de datos (Archivo)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de archivos llamado 'fil'. Se compone de el nombre del archivo, la extensión y el contenido. Si el nombre o la extensión solo contienen \"a-Z\", \"0-9\" o \"_\" se pueden escribir sin comillas. Admite las propiedades y los métodos del tipo de dato \"tex\".",
            "image": "/Images/structfile5.png"
        }
    },  
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Tipos de datos (Directorios)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de directorios llamado 'dir'. Almacena arboles de directorios y archivos. Se puede especificar una única ruta o un árbol de directorios. Se pueden especificar tipos archivos (fil) en el directorio. Si el nombre del los directorios solo contienen \"a-Z\" \"0-9\" o \"_\" se pueden escribir sin comillas. Contiene métodos especializados en el tratamiento de directorios (Acceso, transformación, enumeración, Etc.). ",
            "image": "/Images/structfile6.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "2",
            "title": "Tipos de datos (Listas)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de listas llamado 'lis'. Almacena una lista de elementos de cualquier tipo.",
            "image": "/Images/structfile7.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "1",
            "title": "Tipos de datos (Grupos)",
            "decription": "El lenguaje implementa un tipo de dato para el menejo de Grupos llamado 'gro'. Almacena una lista de elementos del mismo tipo. Cada Elemento tiene asociado un validador de modificación booleano (bol). Permite ejecutar funciones grupales y funciones individuales para cada elemento valido. ",
            "image": "/Images/structfile8.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "2",
            "title": "Comentarios",
            "decription": "El lenguaje admite 3 formas de comentar el código, comentarios de una linea con \"#\" y \"//\"  y comentarios de varias lienas con \"/* */\". ",
            "image": "/Images/structfile9.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "1",
            "title": "Operadores",
            "decription": "El lenguaje admite operadores para diferentes tipos de datos de forma independiente y combinada. Para datos numericos los operadores funcionan de forma estandar. Para operaciones de texto y archivos el signo  '+' representa concatenación, el signo '-' representa sustracción de coincidencia, el signo '*' significa replicación, el sisgno '/' significa partición de primera coincidencia, el signo '/_' significa partición por cada coincidencia, el simbolo '/' entre texto y numero significa partición en el numero de cadenas especificado en el denominador, entre otras definiciones especficas entre operaciones de tipos.",
            "image": "/Images/structfile10.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "2",
            "title": "Comparadores",
            "decription": "El lenguaje admite comparadores para diferentes tipos de datos de forma independiente y combinada. Para datos numericos los comparadores funcionan de forma estandar. Para operaciones con los tipos de datos no numéricos los comparadores actuan en base a la logitud de los elementos. Los valores booleanos son interpretados como 1 para true y 0 para false.",
            "image": "/Images/structfile11.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Funciones",
            "decription": "Una de las caracterisiticas fundamentales del lenguaje es poder realizar tratamiento directo de los datos, por lo tanto se definió que las funciones deben tener retorno obligatorio para asegurar la continuidad de las funciones de los tipos al hacer llamado a los métodos. Al crear dos funciones con el mismo nombre sobrevive solo la ultima función creada. Se pueden crear funciones entre funciones y otras estructuras. ",
            "image": "/Images/structfile12.png"
        }
    }, 
    {
        "type": "description-images",
        "info": {
            "theme": "1",
            "title": "Condicionales",
            "decription": "Admite los diferentes condicionales que emplean los lenguajes de programación en forma estandar. En structFile el switch es una versión simplificada y equivalente al condicional multiple y por lo tanto no necesita del 'break'. Las condiciones admiten directamente cualquier tipo de dato debido a que cada uno de ellos tiene su representación booleana. En el caso de los numeros el false es representado por el 0, en los textos y archivos por el contendio vacio, entre otras definiciones.",
            "subtitles": [
                "If",
                "If - else",
                "If - else - if",
                "switch"
            ],
            "subdescriptions": [
                "",
                "",
                ""
            ],
            "images": [
                "/Images/structfile13.png",
                "/Images/structfile14.png",
                "/Images/structfile15.png",
                "/Images/structfile16.png"
            ]
        }
    },
    {
        "type": "description-images",
        "info": {
            "theme": "3",
            "title": "Ciclos",
            "decription": "Admite los diferentes ciclos repetitivos que emplean los lenguajes de programación en forma estandar. El do - while se simplificó para que se ingrese direcatamente la condición sin especificar el While. EL ciclo For es del tipo del lenguaje C o Java en donde se tiene una asignación, una comparación y un incremento.",
            "subtitles": [
                "While",
                "Do - While",
                "For"
            ],
            "subdescriptions": [
                "",
                "",
                ""
            ],
            "images": [
                "/Images/structfile17.png",
                "/Images/structfile18.png",
                "/Images/structfile19.png"
            ]
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Funciones del tipo de dato num",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'num' para realizar <b>conversión</b> de tipo, <b>copiar</b> u obtener la <b>longitud</b> de caracteres.",
            "image": "/Images/structfile20.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "2",
            "title": "Funciones del tipo de dato bol",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'bol' para realizar <b>conversión</b> de tipo, <b>copiar</b> u obtener la <b>longitud</b> de caracteres.",
            "image": "/Images/structfile21.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para realizar <b>conversión</b> de tipo, <b>copiar</b> u obtener la <b>longitud</b> de caracteres.",
            "image": "/Images/structfile22.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "2",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para obtener subacadenas o caracteres, realizar <b>separaciones o particiones</b> según posiciones o coincidencias con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile23.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "1",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para realizar <b>eliminaciones</b> según posiciones o coincidencias con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile24.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "2",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para realizar <b>remplazamientos</b> según posiciones o coincidencias con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile25.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "1",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para realizar <b>concatenaciones</b> según posiciones o coincidencias con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile26.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "2",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para realizar <b>obtención de conincidencias</b> según posiciones o coincidencias con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile27.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para realizar <b>validación de conincidencias</b> según posiciones o coincidencias con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile28.png"
        }
    },  
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "2",
            "title": "Funciones del tipo de dato tex",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'tex' para <b>obtenención posiciones de conincidencias</b> con expresiones regulares y permitiendo la delimitación de coincidencias por número de coincidencia.",
            "image": "/Images/structfile29.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "1",
            "title": "Funciones del tipo de dato fil",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'fil' para realizar <b>conversión</b> de tipo, <b>copiar</b> u obtener la <b>longitud</b> de caracteres.",
            "image": "/Images/structfile30.png"
        }
    },  
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "2",
            "title": "Funciones del tipo de dato fil",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'fil' para <b>obtener y asignar</b> propiedades del archivo (nombre, extensión y contendio). También soporta todas las <b>funciones por defecto del tipo de dato 'tex'<b>.",
            "image": "/Images/structfile31.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "1",
            "title": "Funciones del tipo de dato dir",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'dir' para obtener <b>propiedades del arbol</b> y <b>copiar</b>.",
            "image": "/Images/structfile32.png"
        }
    },  
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "2",
            "title": "Funciones del tipo de dato dir",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'dir' para obtener la <b>longiutd</b> (Numero de nodos) y <b>obtener y asignar propiedades del contenido</b>.",
            "image": "/Images/structfile33.png"
        }
    },  
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Funciones del tipo de dato dir",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'dir' para realizar <b>inserciones</b> de archivos y directorios",
            "image": "/Images/structfile34.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "2",
            "title": "Funciones del tipo de dato dir",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'dir' para realizar <b>extraciones</b> de archivos y directorios",
            "image": "/Images/structfile35.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "1",
            "title": "Funciones del tipo de dato dir",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'dir' para realizar <b>eliminaciones</b> de archivos y directorios",
            "image": "/Images/structfile36.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "2",
            "title": "Funciones del tipo de dato dir",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'dir' para realizar <b>enumeraciones</b> de archivos y directorios",
            "image": "/Images/structfile37.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "1",
            "title": "Funciones del tipo de dato gro",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'gro' para realizar <b>conversión</b> de tipo, <b>copiar</b>, obtener la <b>longitud</b> de caracteres y <b>unir</b> los elementos que contiene en uno solo. Esto ultimo tiene una utilidad muy grande ya es posible separar cadenas en partes, transofrmarlas y volverlas a unir.",
            "image": "/Images/structfile38.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "2",
            "title": "Funciones del tipo de dato gro",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'gro' para realizar <b>obtención</b> de elementos y realizar <b>cambios de estado</b> de los mismos.",
            "image": "/Images/structfile39.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "1",
            "title": "Funciones del tipo de dato gro",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'gro' para realizar <b>insersión</b> de elementos al final o según posiciones. La caracteristica mas importante es que este tipo de dato <b>ejecuta funciones del tipo de dato sus elementos </b> lo que permite tratar datos en conjunto evitando en gran medida el uso de ciclos.",
            "image": "/Images/structfile40.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "1",
            "type": "2",
            "title": "Funciones del tipo de dato lis",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'lis' para realizar <b>conversión</b> de tipo, <b>copiar</b> y obtener la <b>longitud</b> de elementos.",
            "image": "/Images/structfile41.png"
        }
    }, 
    {
        "type": "description-image",
        "info": {
            "theme": "3",
            "type": "1",
            "title": "Funciones del tipo de dato lis",
            "decription": "StructFile integra por defecto las siguientes funciones para el tipo de dato 'lis' para realizar <b>obtención e insersión</b> de elementos.",
            "image": "/Images/structfile42.png"
        }
    },
    {
        "type": "description-image",
        "info": {
            "theme": "2",
            "type": "2",
            "title": "Funciones de acceso al sistema de archivos de Windows",
            "decription": "StructFile integra por defecto las siguientes funciones para acceder al sistema de archivos de Windows. Especificamente permite <b>leer, escribir, sobrescribir y añadir</b> achivos y direcctorios en el sistema operativo. Son el puente de enlace entre el lenguaje y el sistema.",
            "image": "/Images/structfile43.png"
        }
    },
    {
        "type": "title",
        "info": {
            "theme": "5",
            "title": "Proceso de creación"
        }
    },
    {
        "type": "description-images",
        "info": {
            "theme": "2",
            "title": "Planeación",
            "decription": "",
            "subtitles": [
                "Identificación",
                "Descripción",
                "Formalización"
            ],
            "subdescriptions": [
                "El problema identificado fué la limitación que tienen los lenguajes de programación actuales para tratar directorios, archivos y texto plano a la hora de estrcuturar y organizar la información. Por ejemplo, si un programador desea leer una jerarquia de directorios y archivos y getionarla seguramente va a tener que crear una esctructura de arbol que se lo permita o emplear alguna libreria que le permita el acceso. Otro ejemplo puede ser cuando un programador necesita identificar y tranformar información en un archivo, para esto seguramente se necesita emplear una librearia que permita el acceso a los archivos del sistema, leer toda la información ya que si desea realizar cambios debe reeescribir el archivo, emplear una libreria para expresiones regulares y crear un algoritmo que realice el proceso de transofmación ",
                "Para dar solución a los ejemplos descritos de forma sencilla y rapida y en general dar solución a muchos problemas de tratamiendo de directorios, archivos y texto plano, se determinó crear un lenguaje de progrmación que permitíera trabajar con estructuras de directorios y archivos de froma nativa, que permita el getionamiento por grupos y estructurara infromación plana en base a expresiones regulares.",
                "Se identificaron requisitos funcionales y no funcionales tales como: crear tipos de datos para el manejo de directorios, archivos, textos y grupos de una forma muy simple; crear componentes de progrmación básica como estructuras y funciones para que la información sea facilemnte tratable por los programadores; crear las funciones necesarias para la estructuración y gestionamiento de los tipos de datos con los fines descritos; o utilizar Java como lenguaje de desarrollo y Python como lenguaje de traducción."
            ],
            "images": [
                "/Images/quicklist63.jpg",
                "/Images/quicklist64.jpg",
                "/Images/quicklist65.jpg"
            ]
        }
    },
    {
        "type": "description-images",
        "info": {
            "theme": "1",
            "title": "Diseño",
            "decription": "",
            "subtitles": [
                "Arquitectura",
                "Diseño de Gramática"
            ],
            "subdescriptions": [
                "Se diseñó una arquitectura por capas dividiendo el sistema en el proceso principal, los controladores del lenguaje y el acceso a los datos. Asi mismo los controladores del lenguaje se dividieron en el compilador, la gramática y el traductor.",
                "Para crear la gramtica que representaría el lenguaje de progrmación se identifició como el componente más general el contenido del lenguaje. A partir de ahí se identificadon los componentes que harían parte del contenido los cuales fueron: Las variables, las funciones, las estructuras y las expresiones. Asi sucesivamente se fueron describiendo cada vez mas detalladamente cada componente del lenguaje hasta que se obtuvo una estructura solida que cumpliera con los requerimientos."
            ],
            "images": [
                "/Images/structfile44.png",
                "/Images/structfile45.png"
            ]
        }
    },
    {
        "type": "description-images",
        "info": {
            "theme": "3",
            "title": "Desarrollo",
            "decription": "",
            "subtitles": [
                "Lenguajes",
                "Entorno y tecnologías",
                "Control"
            ],
            "subdescriptions": [
                "Se empleó JAVA SE como lenguaje de programación para desarrollar el compilador. Se utilizó Python como lenguaje de traducción por lo que a paritr de este se desarrollaron todas funcionalidades y parte del control del lenguaje. Se utilizó el lenguaje de ANTLR versión 4 como lenguaje de definición de gramática. Por medio de la tecnología ANTLR se realizó una generación de codigo automático en base a la gramática para crear la estructura del analizador lexico, sintactico y de traducción.",
                "Se utilizó IntelliJ IDEA para poder manejar JAVA con completamiento de código y poder implementar la tecnología ANTLR sin problemas de versionamiento. También se utilizó el entorno de desarrollo JetBrains PyCharm para crear todas las funcionalidades del lenguaje basadas en Python.",
                "Como herramienta de control de versiones se empleó GitHub. Debido a que fué un proyecto individual se empleó la rama Master para ir registrando la actualización de cada elemento del sistema."
            ],
            "images": [
                "/Images/structfile46.gif",
                "/Images/structfile47.png",
                "/Images/quicklist69.png"
            ]
        }
    },
    {
        "type": "description-images",
        "info": {
            "theme": "2",
            "title": "Pruebas",
            "decription": "",
            "subtitles": [
                "Planeación",
                "Ejecución",
                "Verificación"
            ],
            "subdescriptions": [
                "Para determinar la correcta ejecución del compilador se definieron diferentes pruebas de ejecución en las que se vieron involucrados los elementos más fundamentales del lenguajes como los distintos tipod de opradores, las estructuras, las funciones, el tratamiento de texto y el tratamiento de directorios y archivos.",
                "Al concreatar una versión estable del lenguaje éste se sometió a varios algoritmos. El pimero fue un programa sencillo que realizaba operaciónes aritméticas en base a dos datos 'num'. El segundo algoritmo se definieron varios flujos con cilos repetitivos para validar las estructuras. Entre otros algoritmos los ultimos dos fueron los más importantes ya que con el penultimo algoritmo se demostró la capacidad del lenguaje para gestionar un menú con submenús escrito en un archivo de texto seccionando la estructura, cambiando los simbolos de una subestructura y borrando uno de los items del menú con su contenido. Finalmente con el ultimo algoritmo se verificó que el lenguaje puediera realizar tratamiento de directorios en el sistema operativo creando un arbol de directorios y archivos desde el lenguaje, guardandolo en el sistema, recapturandolo en el lenguaje y realizando enumeraciones de contenido.",
                "En las pruebas de ejecución se identificaron algunas falencias como algunas operaciones entre tipos de datos que no estaban soportadas, estructuras que no estaban bien definidas o elementos que se habian omitido en el sistema como el tipo de datos variable de las listas. Sin embargo el 95% de las funcionalidades del lenguaje fueron correctamente implementadas, en especial las necesarias para cumplir con los requerimientos."
            ],
            "images": [
                "/Images/quicklist70.png",
                "/Images/structfile48.png",
                "/Images/quicklist71.jpg"
            ]
        }
    },
    {
        "type": "title",
        "info": {
            "theme": "5",
            "title": "Opinión"
        }
    },
    {
        "type": "description",
        "info": {
            "theme": "1",
            "title": "",
            "decription": "Crear un lenguaje de programación es un de los desarrollos mas largos y complicados que he realizado puesto que involucra muchos conceprtos a nivel teórico y práctico como el manejo de autómatas, expresiones regulaes, gramáticas, grafos entre muchos otros. Realmente fue un proceso muy extenso identificar y controlar cada pequeño componente del lenguaje para que cumpliera su función. Aún asi ANTLR es una herramienta muy útil que reduce en gran medida la complejidad del código a la hora de realizar lenguajes de programación. Aún se necesita continuar trabajando en el lenguaje para que este pueda ejercer su funcionalidad de forma mas amplia y optima. Sin embargo estoy muy satisfecho con los resultados y el conocimiento que adquirí en este proyecto ya que me ha dado una visión mucho mas amplia de todo lo que se puede llegar a desarrollar empleando este tipo de tecnologías."
        }
    }
]